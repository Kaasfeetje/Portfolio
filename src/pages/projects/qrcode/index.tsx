import type { NextPage } from "next";
import Head from "next/head";
import Header from "../../../components/common/header/Header";
import QRCode from "react-qr-code";
import QrScanner from "qr-scanner";
import { useEffect, useRef, useState } from "react";

const Home: NextPage = () => {
    const [state, setState] = useState<"none" | "scanning" | "generating">(
        "none"
    );
    const [qrCodeInput, setQrCodeInput] = useState("");
    const [scanResult, setScanResult] = useState("");
    const videoEl = useRef(null);
    const svgRef = useRef<SVGElement>(null);
    const imageRef = useRef<HTMLImageElement>(null);

    const isValidUrl = (val: string) => {
        let url;

        try {
            url = new URL(val);
        } catch (_) {
            return false;
        }

        return url.protocol === "http:" || url.protocol === "https:";
        //Credit: https://stackoverflow.com/a/43467144
    };

    useEffect(() => {
        if (!svgRef.current || !imageRef.current) return;
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");

        const s = new XMLSerializer();
        svgRef.current.style.visibility = "visible";
        const svg = new Blob([s.serializeToString(svgRef.current)], {
            type: "image/svg+xml",
        });
        svgRef.current.style.visibility = "hidden";

        const DOMURL = window.URL || window.webkitURL || window;
        const url = DOMURL.createObjectURL(svg);

        imageRef.current.onload = function () {
            ctx?.drawImage(new Image(), 0, 0);
            // DOMURL.revokeObjectURL(url);
            const png_img = canvas.toDataURL("image/png");
        };
        imageRef.current.src = url;
    }, [qrCodeInput]);

    useEffect(() => {
        let qrScanner: QrScanner;
        if (videoEl.current && state === "scanning") {
            qrScanner = new QrScanner(
                videoEl.current,
                (result) => {
                    setScanResult(result.data);
                    qrScanner.stop();
                },
                {
                    returnDetailedScanResult: true,
                    highlightScanRegion: true,
                }
            );
            qrScanner.start();
        }
        return () => {
            if (qrScanner) qrScanner.stop();
        };
    }, [videoEl, state]);

    return (
        <div className="overflow-x-hidden max-w-screen ">
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />

            <main>
                {state === "none" && (
                    <div className="w-full mt-8 border-2 border-gray-300 rounded-lg p-4 md:w-1/2 md:mx-auto lg:w-1/3">
                        <h1 className="text-center text-xl font-semibold text-gray-800 mb-4 lg:text-2xl">
                            QR Code scanner and reader
                        </h1>
                        <div className="flex items-center justify-evenly w-full">
                            <button
                                onClick={() => setState("generating")}
                                className="rounded-lg border-2 border-blue-500 bg-blue-500 text-white px-4 py-2 font-bold hover:bg-white hover:text-blue-500"
                            >
                                Create QR Code
                            </button>
                            <button
                                onClick={() => setState("scanning")}
                                className="rounded-lg border-2 border-blue-500 bg-blue-500 text-white px-4 py-2 font-bold hover:bg-white hover:text-blue-500"
                            >
                                Scan QR Code
                            </button>
                        </div>
                    </div>
                )}
                {state === "generating" && (
                    <div className="w-full flex flex-col items-center rounded-lg border-2 border-gray-300 mt-8 overflow-hidden max-w-full md:w-1/2 md:mx-auto lg:w-1/3">
                        <div className="w-full">
                            <img
                                className="w-full h-auto max-w-full"
                                ref={imageRef}
                                src={undefined}
                                alt="qrcode"
                            />
                            <QRCode
                                ref={svgRef}
                                value={qrCodeInput}
                                style={{
                                    height: "auto",
                                    width: "100%",
                                    maxWidth: "100%",
                                    display: "none",
                                }}
                                size={256}
                                viewBox={`0 0 256 256`}
                            />
                        </div>
                        <input
                            className="bg-gray-200 p-2 rounded-lg flex-1 w-full mt-4"
                            type="text"
                            value={qrCodeInput}
                            onChange={(e) => setQrCodeInput(e.target.value)}
                            placeholder="Data..."
                        />
                        <div>
                            <button
                                className="my-4 mx-auto border-2 border-blue-500 text-blue-600 font-bold px-4 py-2 rounded-lg hover:bg-blue-500 hover:text-white"
                                onClick={() => setState("none")}
                            >
                                Back to home
                            </button>
                        </div>
                    </div>
                )}
                {state === "scanning" && (
                    <div className="w-full rounded-lg border-2 border-gray-300 mt-8 flex flex-col justify-center md:w-1/2 md:mx-auto lg:w-1/3">
                        <video
                            className="w-full rounded-lg"
                            ref={videoEl}
                        ></video>
                        <h1 className="my-4 text-center text-gray-800 font-semibold">
                            Result:{" "}
                            {isValidUrl(scanResult) ? (
                                <a href={scanResult}>{scanResult}</a>
                            ) : (
                                scanResult
                            )}
                        </h1>
                        <button
                            className="mx-auto border-2 border-blue-500 text-blue-600 font-bold px-4 py-2 rounded-lg hover:bg-blue-500 hover:text-white"
                            onClick={() => setState("none")}
                        >
                            Back to home
                        </button>
                    </div>
                )}
            </main>
        </div>
    );
};

export default Home;
