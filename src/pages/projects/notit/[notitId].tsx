import { Note, NotePage as NotePageType } from "@prisma/client";
import { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { FormEvent, useEffect, useState } from "react";
import Header from "../../../components/common/header/Header";
import NotePage from "../../../components/notit/NotePage";
import { trpc } from "../../../utils/trpc";

const Notit: NextPage = () => {
    const router = useRouter();
    const notitId = router.query["notitId"] as string;
    const { data, isError, isLoading } = trpc.useQuery([
        "notit.getOne",
        notitId,
    ]);

    const deleteNoteBlockMutation = trpc.useMutation("notit.delete");
    const createNotePageMutation = trpc.useMutation("notit.notepage.create");
    const createNoteMutation = trpc.useMutation("notit.notepage.note.create");

    const [newNotepage, setNewNotepage] = useState("");
    const [notepages, setNotepages] = useState<
        (NotePageType & {
            notes: Note[];
        })[]
    >([]);

    const addNotepage = async (e: FormEvent) => {
        e.preventDefault();
        if (!data) {
            return;
        }
        const createdNotePage = await createNotePageMutation.mutateAsync({
            name: newNotepage,
            noteblockId: notitId,
            index: notepages.length,
        });

        setNotepages([...notepages, createdNotePage]);
        setNewNotepage("");
    };

    const addNewNote = async (
        notepageId: string,
        note: string,
        index: number
    ) => {
        const createdNote = await createNoteMutation.mutateAsync({
            index,
            note,
            notepageId,
        });

        setNotepages(
            notepages.map((n) => {
                if (n.id !== notepageId) {
                    return n;
                }

                return {
                    ...n,
                    notes: [...n.notes, createdNote],
                };
            })
        );
    };

    useEffect(() => {
        //set notepages when data comes in
        if (data) {
            setNotepages(data.notepages);
        }
    }, [data]);

    useEffect(() => {
        //when deleting this noteblock redirect to home
        if (deleteNoteBlockMutation.isSuccess) {
            router.push("/projects/notit");
        }
    }, [deleteNoteBlockMutation.isSuccess, router]);

    if (isLoading) {
        return <div>Loading...</div>;
    }

    if (isError || !data) {
        return <div>Error...</div>;
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <main className="">
                <h1 onClick={() => deleteNoteBlockMutation.mutate(notitId)}>
                    {data.name}
                </h1>
                <hr />
                <div className="flex">
                    {notepages.map((notepage) => (
                        <NotePage
                            key={notepage.id}
                            notepage={notepage}
                            addNewNote={addNewNote}
                        />
                    ))}
                    <form onSubmit={addNotepage}>
                        <input
                            className="bg-gray-200"
                            type="text"
                            value={newNotepage}
                            onChange={(e) => setNewNotepage(e.target.value)}
                        />
                    </form>
                </div>
            </main>
        </>
    );
};

export default Notit;
