import { NextPage } from "next";
import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { FormEvent, useState } from "react";
import Header from "../../../components/common/header/Header";
import FormQuestion from "../../../components/quiz/FormQuestion";
import { trpc } from "../../../utils/trpc";

const CreateQuiz: NextPage = () => {
    const { data: session, status } = useSession();
    const router = useRouter();
    const createQuizMutation = trpc.useMutation(["quiz.create"]);

    const [name, setName] = useState("");

    const [questions, setQuestions] = useState<
        {
            question: string;
            options: {
                option: string;
                answer: boolean;
            }[];
        }[]
    >([]);

    const [question, setQuestion] = useState("");

    const saveQuiz = () => {
        createQuizMutation.mutate({ questions, name });
    };

    const addQuestion = (e: FormEvent) => {
        e.preventDefault();
        const hasQuestion =
            questions.filter((q) => q.question === question).length !== 0;

        if (hasQuestion) {
            //TODO: add error message
            return;
        }

        setQuestions([
            ...questions,
            {
                question,
                options: [],
            },
        ]);
        setQuestion("");
    };

    const deleteQuestion = (_question: string) => {
        setQuestions(questions.filter((q) => q.question !== _question));
    };

    const addOption = (_question: string, option: string) => {
        const updated = questions.map((q) => {
            if (q.question !== _question) {
                return q;
            }

            const hasOption =
                q.options.filter((o) => o.option === option).length !== 0;

            if (hasOption) {
                return q;
            }
            return {
                ...q,
                options: [...q.options, { option: option, answer: false }],
            };
        });

        if (updated === questions) {
            //TODO: Add error message
            return;
        }

        setQuestions(updated);
    };

    const deleteOption = (_question: string, option: string) => {
        const updated = questions.map((q) => {
            if (q.question !== _question) {
                return q;
            }

            return {
                ...q,
                options: q.options.filter((o) => o.option !== option),
            };
        });
        if (updated === questions) {
            return;
        }

        setQuestions(updated);
    };

    const changeCorrect = (_question: string, option: string) => {
        const updated = questions.map((q) => {
            if (q.question !== _question) {
                return q;
            }

            return {
                ...q,
                options: q.options.map((o) => {
                    if (o.option === option) {
                        return { ...o, answer: true };
                    }
                    return { ...o, answer: false };
                }),
            };
        });

        if (updated === questions) {
            return;
        }

        setQuestions(updated);
    };

    if (status === "loading") {
        return <div>Loading...</div>;
    }
    if (status === "unauthenticated") {
        signIn();
    }

    if (createQuizMutation.isSuccess) {
        router.push(`/projects/quiz/${createQuizMutation.data.id}`);
    }

    return (
        <div className="w-screen min-h-screen bg-blue-50">
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <main className="border-blue-500 border-2 rounded-lg p-4 text-blue-900 mt-16 md:w-1/2 md:mx-auto lg:w-96">
                <div className="pb-2">
                    <div className="flex justify-between align-middle mb-4">
                        <label htmlFor="quiz-name">Quiz name</label>
                        <input
                            id="quiz-name"
                            type="text"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                        />
                    </div>

                    <form
                        onSubmit={addQuestion}
                        className="flex justify-between align-middle"
                    >
                        <label htmlFor="quiz-question">Add question</label>
                        <input
                            id="quiz-question"
                            type="text"
                            value={question}
                            onChange={(e) => setQuestion(e.target.value)}
                        />
                    </form>
                    <button
                        onClick={() => saveQuiz()}
                        className="w-full mt-4 border-blue-500 border-2 rounded-lg font-semibold text-blue-500"
                    >
                        Save Quiz
                    </button>
                </div>
                <hr className="border-blue-500" />
                <div>
                    {questions.map((q) => (
                        <FormQuestion
                            key={q.question}
                            question={q}
                            deleteQuestion={deleteQuestion}
                            addOption={addOption}
                            deleteOption={deleteOption}
                            changeCorrect={changeCorrect}
                        ></FormQuestion>
                    ))}
                </div>
            </main>
        </div>
    );
};

export default CreateQuiz;
