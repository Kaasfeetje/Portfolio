// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    quizes        Quiz[]
    noteBlocks    NoteBlock[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//Quiz app
model Quiz{
    id String @id @default(cuid())
    name String @unique
    description String?
    
    author User @relation(fields:[authorId],references:[id],onDelete:Cascade)
    authorId String

    questions QuizQuestion[]
}

model QuizQuestion{
    id String @id @default(cuid())
    question String

    quiz Quiz @relation(fields:[quizId],references: [id],onDelete: Cascade)
    quizId String
    
    options QuizOption[]
}

model QuizOption{
    id String @id @default(cuid())
    option String
    answer Boolean

    quiz QuizQuestion @relation(fields:[quizId],references: [id],onDelete: Cascade)
    quizId String
}

//Notit
model NoteBlock{
    id String @id @default(cuid())
    name String
    description String?
    visibility Visibility
    createdAt DateTime

    author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
    authorId String

    notepages NotePage[]
}

model NotePage{
    id String @id @default(cuid())
    name String
    description String?
    createdAt DateTime
    targetDate DateTime?
    finishDate DateTime?
    finished Boolean
    index Int

    noteblock NoteBlock @relation(fields:[noteblockId],references: [id],onDelete: Cascade)
    noteblockId String

    notes Note[]
}

model Note{
    id String @id @default(cuid())
    note String
    index Int
    finished Boolean
    important Boolean

    notePage NotePage @relation(fields: [notePageId],references: [id],onDelete: Cascade)
    notePageId String
}

enum Visibility{
    PUBLIC
    PRIVATE
}